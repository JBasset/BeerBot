using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using MySql.Data.MySqlClient;

namespace Domain
{
    public class OpenBeerDB
        // Manipulations of the database will use this class
    {
        private string mySqlConnectionString = "SERVER=127.0.0.1; DATABASE=openbeerdb; UID=root; PASSWORD=";
        private MySqlConnection connection;

        public List<User> users { get; private set; }

        public OpenBeerDB()
        {
            connection = new MySqlConnection(mySqlConnectionString);
            generateFactFile(); // creating the file "facts.pl", countaining all the facts from the database in their prolog form
            users = getUsers();
        }

        public List<User> getUsers()
        {
            List<string[]> usersAttributes = Select(new string[] { "id", "name", "password", "birth_year", "gender", "social_cat_id" }, "users");
            List<User> users = new List<User> { };
            foreach(string[] userAttributes in usersAttributes)
            {
                users.Add(new User(
                    int.Parse(userAttributes[0]),
                    userAttributes[1],
                    userAttributes[2],
                    int.Parse(userAttributes[3]),
                    bool.Parse(userAttributes[4]),
                    userAttributes[5]));
            }
            return users;
        }

        private void generateFactFile()
        {
            List<string> lines = new List<string> { };

            // first comment on top of the file
            lines.Add("%this file is automatically generated from the main program. It musn't be changed in any way, since changes will be erased by the program");

            #region creating lines from the data in the database

            /*
            the names will be automatically generated from the Id of the object in the database before being made into
            a prolog element, since the names in the database often contain unallowed characters in prolog
            */

            #region getting all beers
            List<string[]> beers = Select(new string[] { "id" }, "beers");
            foreach (string[] beer in beers)
            {
                string prologName = "beer" + beer[0];
                lines.Add("beer(" + prologName + ").");
            }
            #endregion
            
            #region getting all categories
            List<string[]> categories = Select(new string[] { "id" }, "categories");
            foreach (string[] category in categories)
            {
                if (int.Parse(category[0]) != -1)
                {
                    string prologName = "category" + category[0];
                    lines.Add("category(" + prologName + ").");
                }
                else
                    lines.Add("category(unknownCategory)."); // We need an unknown category, but the name "category-1" isn't acceptable
            }
            #endregion

            #region getting all styles
            List<string[]> styles = Select(new string[] { "id" }, "styles"); ;
            foreach (string[] style in styles)
            {
                if (int.Parse(style[0]) != -1)
                {
                    string prologName = "style" + style[0];
                    lines.Add("style(" + prologName + ").");
                }
                else
                    lines.Add("style(unknownStyle)."); // We need an unknown style, but the name "style-1" isn't acceptable
            }
            #endregion

            #region getting all abv (alcohol by volume)
            List<string[]> abvs = Select(new string[] { "id", "abv" }, "beers");
            foreach (string[] abv in abvs)
            {
                lines.Add("abv(beer"+ abv[0] + ","+abv[1].Replace(',','.')+")."); // decimals should be separated with a dot, not a comma
            }
            #endregion

            #region getting all ibu (internationnal bitterness unit)
            List<string[]> ibus = Select(new string[] { "id", "ibu" }, "beers");
            foreach (string[] ibu in ibus)
            {
                lines.Add("ibu(beer" + ibu[0] + "," + ibu[1].Replace(',', '.') + ")."); // decimals should be separated with a dot, not a comma
            }
            #endregion

            #region getting all srm (standard reference method)
            List<string[]> srms = Select(new string[] { "id", "srm" }, "beers");
            foreach (string[] srm in srms)
            {
                lines.Add("srm(beer" + srm[0] + "," + srm[1].Replace(',', '.') + ")."); // decimals should be separated with a dot, not a comma
            }
            #endregion

            #region getting all beers categories
            List<string[]> beersCat = Select(new string[] { "id", "cat_id" }, "beers");
            foreach (string[] beerCat in beersCat)
            {
                string beerPrologName = "beer" + beerCat[0];
                string catPrologName;
                if (int.Parse(beerCat[1]) != -1)
                    catPrologName = "category" + beerCat[1];
                else
                    catPrologName = "unknownCategory";
                lines.Add("beerCategory(" + beerPrologName + "," + catPrologName + ").");
            }
            #endregion

            #region getting all beers styles
            List<string[]> beersSty = Select(new string[] { "id", "style_id" }, "beers");
            foreach (string[] beerSty in beersSty)
            {
                string beerPrologName = "beer" + beerSty[0];
                string styPrologName;
                if (int.Parse(beerSty[1]) != -1)
                    styPrologName = "style" + beerSty[1];
                else
                    styPrologName = "unknownStyle";
                lines.Add("beerStyle(" + beerPrologName + "," + styPrologName + ").");
            }
            #endregion

            #region getting all styles categories
            List<string[]> stylesCat = Select(new string[] { "id", "cat_id" }, "styles");
            foreach (string[] styleCat in stylesCat)
            {
                string stylePrologName;
                if (int.Parse(styleCat[0]) != -1)
                    stylePrologName = "style" + styleCat[0];
                else
                    stylePrologName = "unknownStyle";

                string catPrologName;
                if (int.Parse(styleCat[1]) != -1)
                    catPrologName = "category" + styleCat[1];
                else
                    catPrologName = "unknownCategory";

                lines.Add("styleCategory(" + stylePrologName + "," + catPrologName + ").");
            }
            #endregion

            #region getting all social categories
            List<string[]> socCats = Select(new string[] { "id" }, "social_categories");
            foreach (string[] socCat in socCats)
            {
                string prologName = "socialCategory" + socCat[0];
                lines.Add("socialCategory(" + prologName + ").");
            }
            #endregion

            #region getting all users
            List<string[]> users = Select(new string[] { "id" }, "users");
            foreach (string[] user in users)
            {
                string prologName = "user" + user[0];
                lines.Add("user(" + prologName + ").");
            }
            #endregion

            #region getting all users birth years
            List<string[]> bys = Select(new string[] { "id", "birth_year" }, "users");
            foreach (string[] by in bys)
            {
                string prologName = "user" + by[0];
                lines.Add("birthDate(" + prologName + "," + by[1] + ").");
            }
            #endregion

            #region getting all users genders
            List<string[]> genders = Select(new string[] { "id", "gender" }, "users");
            foreach (string[] gender in genders)
            {
                string prologName = "user" + gender[0];
                string stringGender = (bool.Parse(gender[1])) ? "woman" : "man";
                lines.Add("gender(" + prologName + "," + stringGender + ").");
            }
            #endregion

            #region getting all users social categories
            List<string[]> userSocCats = Select(new string[] { "id", "social_cat_id" }, "users");
            foreach (string[] userSocCat in userSocCats)
            {
                string prologName = "user" + userSocCat[0];
                string socCatPlName = "socialCategory" + userSocCat[1];
                lines.Add("userSocialCategory(" + prologName + "," + socCatPlName + ").");
            }
            #endregion

            #region getting all users ratings
            List<string[]> ratings = Select(new string[] { "user_id", "beer_id", "rating" }, "ratings");
            foreach (string[] rating in ratings)
            {
                string userPlName = "user" + rating[0];
                string beerPlName = "beer" + rating[1];
                lines.Add("rates(" + userPlName + "," + beerPlName + "," + rating[2].Replace(',','.') + ").");
            }
            #endregion
            
            #endregion

            using (StreamWriter outputFile = new StreamWriter("..\\..\\..\\PrologEngine\\facts.pl"))
            {
                foreach (string line in lines)
                {
                    outputFile.WriteLine(line);
                }
            }
        }

        #region getting information from the database
        public List<string[]> Select(string[] rows, string table)
        {
            connection.Open();

            string query = "SELECT ";
            foreach (string row in rows)
                query += row + ", ";
            query = query.Substring(0, query.Length-2); // suppressing the last ", "
            query += " FROM ";
            query += table;

            List<string[]> results = new List<string[]> { };

            MySqlCommand cmd = connection.CreateCommand();
            cmd.CommandText = query;

            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                string[] thisRow = new string[rows.Length];
                for (int i = 0; i < rows.Length; i++)
                {
                    thisRow[i] = reader.GetString(rows[i]);
                }
                results.Add(thisRow);
            }

            connection.Close();
            return results;
        }

        public void Insert(string table, string[] rows, string[] values)
        {
            connection.Open();

            string query = "INSERT INTO " + table + " (";
            foreach (string row in rows)
                query += row + ", ";
            query = query.Substring(0, query.Length - 2); // suppressing the last ", "
            query += ") VALUES (";
            foreach (string value in values)
                query += "\"" + value + "\"" + ", ";
            query = query.Substring(0, query.Length - 2); // suppressing the last ", "
            query += ")";

            MySqlCommand cmd = connection.CreateCommand();
            cmd.CommandText = query;
            cmd.ExecuteNonQuery();

            connection.Close();
        }
        #endregion
    }
}
